<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术分享 on 白菜林</title>
    <link>https://3ae.cn/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/</link>
    <description>Recent content in 技术分享 on 白菜林</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>baicai</copyright>
    <lastBuildDate>Thu, 01 Jul 2021 18:58:23 +0800</lastBuildDate><atom:link href="https://3ae.cn/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>跨域方案Nginx配置</title>
      <link>https://3ae.cn/article/2021/nginx_cors_server_conf/</link>
      <pubDate>Thu, 01 Jul 2021 18:58:23 +0800</pubDate>
      
      <guid>https://3ae.cn/article/2021/nginx_cors_server_conf/</guid>
      <description>什么是浏览器同源策略？ 同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。
同源是指&amp;quot;协议+域名+端口&amp;quot;三者相同，即便两个不同的域名指向同一个ip地址，也非同源。
如何实现跨域？ 跨域是个比较古老的命题了，历史上跨域的实现手段有很多，我们现在主要介绍Nginx的跨域方案，其余的方案我们就不深入讨论了。
方便的跨域方案Nginx nginx是一款极其强大的web服务器，其优点就是轻量级、启动快、高并发。
现在的新项目中nginx几乎是首选，我们用node或者go开发的服务通常都需要经过nginx的反向代理。
反向代理的原理很简单，即所有客户端的请求都必须先经过nginx的处理，nginx作为代理服务器再讲请求转发给node或者go服务，这样就规避了同源策略。
#进程, 可更具cpu数量调整 worker_processes 1; events { #连接数 worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; #连接超时时间，服务器会在这个时间过后关闭连接。 keepalive_timeout 10; # gizp压缩 gzip on; # 直接请求nginx也是会报跨域错误的这里设置允许跨域 # 如果代理地址已经允许跨域则不需要这些, 否则报错(虽然这样nginx跨域就没意义了) add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Headers X-Requested-With; add_header Access-Control-Allow-Methods GET,POST,OPTIONS; # srever模块配置是http模块中的一个子模块，用来定义一个虚拟访问主机 server { listen 80; server_name localhost; # 根路径指到index.html location / { root html; index index.html index.htm; } # localhost/api 的请求会被转发到192.168.0.103:8080 location /api { rewrite ^/b/(.</description>
    </item>
    
    <item>
      <title>Rust 镜像源</title>
      <link>https://3ae.cn/article/2021/rustproxy/</link>
      <pubDate>Fri, 25 Jun 2021 22:53:14 +0800</pubDate>
      
      <guid>https://3ae.cn/article/2021/rustproxy/</guid>
      <description>通常cargo跑得挺顺畅，不怎么需要proxy。但有备无患。
crates.io 和 rustup 的国内镜像源 字节跳动提供的：https://rsproxy.cn/
中国科技大学的：https://mirrors.ustc.edu.cn/help/crates.io-index.html
清华大学的：https://mirrors.tuna.tsinghua.edu.cn/help/rustup/
上海交通大学的：https://git.sjtu.edu.cn/sjtug/crates.io-index
更换国内源 更换为国内源，否则安装太慢了。 新建文件：~/.cargo/config，内容替换为如下，replace-with 这行可自己 ping 文件中各个国内源头，看哪个源快用哪个：
[source.crates-io] registry = &amp;#34;https://github.com/rust-lang/crates.io-index&amp;#34; # 替换成你偏好的镜像源 replace-with = &amp;#39;sjtu&amp;#39; # 清华大学 [source.tuna] registry = &amp;#34;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&amp;#34; # 中国科学技术大学 [source.ustc] registry = &amp;#34;git://mirrors.ustc.edu.cn/crates.io-index&amp;#34; # 上海交通大学 [source.sjtu] registry = &amp;#34;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index&amp;#34; # rustcc社区 [source.rustcc] registry = &amp;#34;git://crates.rustcc.cn/crates.io-index&amp;#34; # 字节跳动 [source.rsproxy] registry = &amp;#34;https://rsproxy.cn/crates.io-index&amp;#34; </description>
    </item>
    
    <item>
      <title>Goproxy</title>
      <link>https://3ae.cn/article/2021/goproxy/</link>
      <pubDate>Thu, 27 May 2021 11:22:40 +0800</pubDate>
      
      <guid>https://3ae.cn/article/2021/goproxy/</guid>
      <description>Go Module代理仓库服务 七牛云提供的：https://goproxy.cn
goproxy.io：https://goproxy.io 或 https://proxy.golang.com.cn
百度云BOS提供的：https://goproxy.bj.bcebos.com/
阿里云提供的：https://mirrors.aliyun.com/goproxy/
下载 Go 镜像（Golang Downloads Mirrors） 官网：https://go.dev/
下载 Go 镜像：https://golang.google.cn/
下载 Go 镜像：https://gomirrors.org/
下载 Go 镜像：https://studygolang.com/dl</description>
    </item>
    
  </channel>
</rss>
