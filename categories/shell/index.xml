<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on 白菜林</title>
    <link>https://3ae.cn/categories/shell/</link>
    <description>Recent content in Shell on 白菜林</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>baicai</copyright>
    <lastBuildDate>Mon, 14 Feb 2022 17:37:24 +0800</lastBuildDate><atom:link href="https://3ae.cn/categories/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 Linux 命令行中使用的 6 个元字符</title>
      <link>https://3ae.cn/article/2022/linux_metacharacters/</link>
      <pubDate>Mon, 14 Feb 2022 17:37:24 +0800</pubDate>
      
      <guid>https://3ae.cn/article/2022/linux_metacharacters/</guid>
      <description>在 Linux 命令行上使用元字符是提高生产力的一个好方法。 许多 Linux 电脑是无头运行的，你可以在命令行上完成所有的管理任务。它使用许多所有人都熟悉的基本命令，如 ls、ls-l、ls-l、cd、pwd、top 等等。
Linux 上的 Shell 元字符 你可以通过使用元字符来扩展这些命令。
管道符 | 假设我想知道我的系统上运行的 Firefox 的所有实例。我可以使用带有 -ef 参数的 ps 命令来列出我系统上运行的所有程序实例。现在我想只看那些涉及 Firefox 的实例。我使用了我最喜欢的元字符之一，管道符 |，将其结果送到 grep，用它来搜索模式：
$ ps -ef | grep firefox 输出重定向 &amp;gt; 另一个我最喜欢的元字符是输出重定向 &amp;gt;。我用它来打印 dmesg 命令结果中所有 AMD 相关的结果。你可能会发现这在硬件故障排除中很有帮助：
$ dmesg | grep amd &amp;gt; amd.txt $ cat amd.txt [ 0.897] amd_uncore: 4 amd_df counters detected [ 0.897] amd_uncore: 6 amd_l3 counters detected [ 0.898] perf/amd_iommu: Detected AMD IOMMU #0 (2 banks, 4 counters/bank).</description>
    </item>
    
    <item>
      <title>Linux 常用命令</title>
      <link>https://3ae.cn/article/2021/linux_cmd/</link>
      <pubDate>Sat, 05 Jun 2021 10:31:29 +0800</pubDate>
      
      <guid>https://3ae.cn/article/2021/linux_cmd/</guid>
      <description>Linux 常用命令
日期 $(date -d &amp;#39;1 day ago&amp;#39; &amp;#39;+%Y-%m-%d&amp;#39;) 常用方法
数字格式化 part=`printf &amp;#34;%03d&amp;#34; $i` # 左补0 删除旧文件 # 找出5天前修改的文件名以.tar结尾的文件进行删除 find /www/backup -mtime +5 -name &amp;#34;*.tar&amp;#34; |xargs rm for循环 for ((i=0;i&amp;lt;10;i++)) do _date=$(date +%Y-%m-%d -d &amp;#34;${i} day&amp;#34;) echo $_date done # for i in {1..10} do echo $i done 文件合并 find ./ -name &amp;#34;item*&amp;#34; | xargs sed &amp;#39;a\&amp;#39; &amp;gt; all.txt find ./ -name &amp;#34;item*&amp;#34; | xargs cat &amp;gt; all.txt :s/old/new #替换当前行的第一个old为new :s/old/new/g #替换当前行的所有的old为new :.</description>
    </item>
    
    <item>
      <title>awk 分析 nginx 运行日志常用指令</title>
      <link>https://3ae.cn/article/2021/awk-nginx-access_log/</link>
      <pubDate>Sat, 05 Jun 2021 10:16:16 +0800</pubDate>
      
      <guid>https://3ae.cn/article/2021/awk-nginx-access_log/</guid>
      <description>awk 分析 nginx 运行日志常用指令
1.独立IP
awk &amp;#39;{print $1}&amp;#39; access.log | sort -r |uniq -c | wc -l 2.统计PV
awk &amp;#39;{print $6}&amp;#39; access.log | wc -l 3.查询访问最频繁的URL
awk &amp;#39;{print $7}&amp;#39; access.log|sort | uniq -c |sort -n -k 1 -r|more 4.查询访问最频繁的IP
awk &amp;#39;{print $1}&amp;#39; access.log|sort | uniq -c |sort -n -k 1 -r|more 5.UV统计：
awk &amp;#39;{print $6}&amp;#39; access.log | sort -r |uniq -c |wc -l 6.按小时统计
cat access.log |awk &amp;#39;{print $4}&amp;#39; | awk -F &amp;#39;:&amp;#39; &amp;#39;{print $1,$2}&amp;#39;|uniq -c | awk &amp;#39;{print $2&amp;#34; &amp;#34;$3&amp;#34; &amp;#34;$1}&amp;#39; </description>
    </item>
    
  </channel>
</rss>
