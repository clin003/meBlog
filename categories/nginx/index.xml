<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on 白菜林</title>
    <link>https://3ae.cn/categories/nginx/</link>
    <description>Recent content in Nginx on 白菜林</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>baicai</copyright>
    <lastBuildDate>Sat, 23 Jul 2022 23:52:39 +0800</lastBuildDate><atom:link href="https://3ae.cn/categories/nginx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>nginx 启用目录索引，显示文件列表</title>
      <link>https://3ae.cn/article/2022/nginx_autoindex_conf/</link>
      <pubDate>Sat, 23 Jul 2022 23:52:39 +0800</pubDate>
      
      <guid>https://3ae.cn/article/2022/nginx_autoindex_conf/</guid>
      <description>在nginx中，如果特定目录中没有index.html 文件，则默认会返回 404 Not Found 的错误。
但是，Nginx 自动索引模块—— ngx_http_autoindex_module 模块，提供了一种自动生成列表的方法，添加自动索引非常容易，使用 autoindex on 即可。下面的配置，将在访问特定请求时返回目录结构。
官方参考： http://nginx.org/en/docs/http/ngx_http_autoindex_module.html server { listen 80; ... ... location /index_dir { autoindex on; } } 除了简单地使用自动索引打开或关闭之外，还可以对其做其他的配置，包括：
autoindex_exact_size; 显示输出的确切文件大小，还是最接近的KB，MB或GB。默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB。 autoindex_format; 该指令指定Nginx索引列表应以什么格式输出。该指令有4个选项：html/xml/json/jsonp。 autoindex_localtime; 显示的文件时间为GMT时间。 注意:改为on后，显示的文件时间为文件的服务器时间。 使用这几个配置后配置内容类似于如下内容：
location /index_dir/ { root /data/index_dir/; autoindex on; autoindex_exact_size off; autoindex_format html; autoindex_localtime on; } 如果有中文目录的话会出现乱码问题，所以还需要在下面添加这一句：
charset utf-8; 或
charset utf-8,gbk; </description>
    </item>
    
    <item>
      <title>跨域方案Nginx配置</title>
      <link>https://3ae.cn/article/2021/nginx_cors_server_conf/</link>
      <pubDate>Thu, 01 Jul 2021 18:58:23 +0800</pubDate>
      
      <guid>https://3ae.cn/article/2021/nginx_cors_server_conf/</guid>
      <description>什么是浏览器同源策略？ 同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。
同源是指&amp;quot;协议+域名+端口&amp;quot;三者相同，即便两个不同的域名指向同一个ip地址，也非同源。
如何实现跨域？ 跨域是个比较古老的命题了，历史上跨域的实现手段有很多，我们现在主要介绍Nginx的跨域方案，其余的方案我们就不深入讨论了。
方便的跨域方案Nginx nginx是一款极其强大的web服务器，其优点就是轻量级、启动快、高并发。
现在的新项目中nginx几乎是首选，我们用node或者go开发的服务通常都需要经过nginx的反向代理。
反向代理的原理很简单，即所有客户端的请求都必须先经过nginx的处理，nginx作为代理服务器再讲请求转发给node或者go服务，这样就规避了同源策略。
#进程, 可更具cpu数量调整 worker_processes 1; events { #连接数 worker_connections 1024; } http { include mime.types; default_type application/octet-stream; sendfile on; #连接超时时间，服务器会在这个时间过后关闭连接。 keepalive_timeout 10; # gizp压缩 gzip on; # 直接请求nginx也是会报跨域错误的这里设置允许跨域 # 如果代理地址已经允许跨域则不需要这些, 否则报错(虽然这样nginx跨域就没意义了) add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Headers X-Requested-With; add_header Access-Control-Allow-Methods GET,POST,OPTIONS; # srever模块配置是http模块中的一个子模块，用来定义一个虚拟访问主机 server { listen 80; server_name localhost; # 根路径指到index.html location / { root html; index index.html index.htm; } # localhost/api 的请求会被转发到192.168.0.103:8080 location /api { rewrite ^/b/(.</description>
    </item>
    
    <item>
      <title>awk 分析 nginx 运行日志常用指令</title>
      <link>https://3ae.cn/article/2021/awk-nginx-access_log/</link>
      <pubDate>Sat, 05 Jun 2021 10:16:16 +0800</pubDate>
      
      <guid>https://3ae.cn/article/2021/awk-nginx-access_log/</guid>
      <description>awk 分析 nginx 运行日志常用指令
1.独立IP
awk &amp;#39;{print $1}&amp;#39; access.log | sort -r |uniq -c | wc -l 2.统计PV
awk &amp;#39;{print $6}&amp;#39; access.log | wc -l 3.查询访问最频繁的URL
awk &amp;#39;{print $7}&amp;#39; access.log|sort | uniq -c |sort -n -k 1 -r|more 4.查询访问最频繁的IP
awk &amp;#39;{print $1}&amp;#39; access.log|sort | uniq -c |sort -n -k 1 -r|more 5.UV统计：
awk &amp;#39;{print $6}&amp;#39; access.log | sort -r |uniq -c |wc -l 6.按小时统计
cat access.log |awk &amp;#39;{print $4}&amp;#39; | awk -F &amp;#39;:&amp;#39; &amp;#39;{print $1,$2}&amp;#39;|uniq -c | awk &amp;#39;{print $2&amp;#34; &amp;#34;$3&amp;#34; &amp;#34;$1}&amp;#39; </description>
    </item>
    
  </channel>
</rss>
