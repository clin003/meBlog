[{"categories":["收集与整理"],"content":" unsafe 包真的不安全吗？ https://mp.weixin.qq.com/s/rIqkKNUecvnZ6gadThf4gg go-callvis 源码分析 https://mp.weixin.qq.com/s/dUXXGd8hqEhKE_Cj4EY2Lw 深度探索Go语言（二）：动态派发 https://mp.weixin.qq.com/s/fhpKBRqhRAxFnESQ4vTbWQ 再一次看到了 Go 的节制：int128 类型要不要支持？ https://mp.weixin.qq.com/s/5uW2rcIEhFPCCTPqrhwOow Go 笔试题精选 三： 19 道填空题 https://mp.weixin.qq.com/s/5Zd1DmQGDvjMySOUf7eFMg 在提赋能之前，先想想这5个问题 https://mp.weixin.qq.com/s/V8l7S7A-kRF_WDb7tlJJ0Q 代码无可避免腐化是因为这 5 个原因 https://mp.weixin.qq.com/s/IzDgV6AmK-2ph1ctcz9liA kubebuilder 实战: CRUD https://mp.weixin.qq.com/s/UDA55y5RCpzyDvfSfs9d2w 实现无限缓存的channel https://colobu.com/2021/05/11/unbounded-channel-in-go/ 轻轻松松打印网页并生成 pdf 文档 https://colobu.com/2021/05/05/generate-pdf-for-a-web-page-by-using-chromedp/ Go 1.16 的 signal.NotifyContext 让你的服务重启更优雅 https://juejin.cn/post/6960578101755510798 一种持锁被调度的情况 https://xargin.com/schedule-when-holding-lock-causes-latency-spike/ assembly 完全解析： https://segmentfault.com/a/1190000039978109?utm_source=tag-newest strace 的 10 个命令 https://colobu.com/2021/04/30/strace-commands-for-troubleshooting-and-debugging-linux/ 使eBPF工作在windows操作系统上 https://cloudblogs.microsoft.com/opensource/2021/05/10/making-ebpf-work-on-windows/ 油管视频：调试你的Go test代码：用printf还是delve https://www.youtube.com/watch?v=nmNVd7FbSYs 如何在你的本地项目中使用未发布的Go module https://iaziz786.com/blog/use-unpublished-go-modules Prometheus监控告警规则大全 https://awesome-prometheus-alerts.grep.to/ dblab: 支持与PostgreSQL和MySQL交互的终端命令行工具 https://github.com/danvergara/dblab 终端应用的自动黑暗模式 by vim-go作者 https://arslan.io/2021/02/15/automatic-dark-mode-for-terminal-applications/ 另一个开源的容器平台 https://github.com/sylabs/singularity 在Go中没有一个完美的切片克隆方案 https://github.com/go101/go101/wiki/There-is-not-a-perfect-slice-clone-way-in-Go 理解nil接口类型与值为nil的接口变量 https://trstringer.com/go-nil-interface-and-interface-with-nil-concrete-value/ 微软Teams的命令行终端UI工具 https://github.com/fossteams/teams-cli Kubernetes GUI大全 http://kokizzu.blogspot.com/2021/03/kubernetes-gui.html 如何做出你的第一个开源贡献 https://dev.to/codesandboxio/how-to-make-your-first-open-source-contribution-2oim 无服务器下的数据库 https://mp.weixin.qq.com/s/_MfuhpSAtZFnB8p-xp5HUw MySQL AUTO_UNCREMENT https://mp.weixin.qq.com/s/Ya3JrUftN0ASI8dTzb1lvw facebook google网络架构揭秘 https://mp.weixin.qq.com/s/MPBk9wdYsE48H7OXWAd5bA ","date":"2021-05-13","objectID":"/go20210513/:0:0","tags":["Go","微服务"],"title":"Go20210513","uri":"/go20210513/"},{"categories":["Using Software"],"content":" cron 是一个调度守护进程，它以指定的时间间隔执行任务，这些任务称为 corn 作业，主要用于自动执行系统维护或管理任务。例如，你可以设置一个 cron 作业来自动执行重复的任务，比如备份数据库或数据，使用最新的安全补丁更新系统，检查磁盘空间使用情况，发送电子邮件等等。 cron 作业可以按分钟、小时、日、月、星期或它们的任意组合运行。 cron 的一些优点 以下是使用 cron 作业的一些优点： 你可以更好地控制作业的运行时间。例如，你可以精确到分钟、小时、天等。 它消除了为循环任务逻辑而去写代码的需要，当你不再需要执行任务时，可以直接关闭它。 作业在不执行时不会占用内存，因此你可以节省内存分配。 如果一个作业执行失败并由于某种原因退出，它将在适当的时间再次运行。 安装 cron 守护进程 幸运的是，Fedora Linux 预先配置了运行重要的系统任务来保持系统更新，有几个实用程序可以运行任务例如 cron、anacron、at 和 batch 。本文只关注 cron 实用程序的安装。cron 和 cronie 包一起安装，cronie 包也提供 cron 服务。 ","date":"2021-05-12","objectID":"/linux_cron/:0:0","tags":["cron","linux","自动化任务"],"title":"使用 cron 调度自动化任务","uri":"/linux_cron/"},{"categories":["Using Software"],"content":"要确定软件包是否已经存在，使用 rpm 命令： $ rpm -q cronie Cronie-1.5.2-4.el8.x86_64 如果安装了 cronie ，它将返回 cronie 包的全名。如果你的系统中没有安装，则会显示未安装。 ","date":"2021-05-12","objectID":"/linux_cron/:0:1","tags":["cron","linux","自动化任务"],"title":"使用 cron 调度自动化任务","uri":"/linux_cron/"},{"categories":["Using Software"],"content":"使用以下命令安装： $ dnf install cronie ","date":"2021-05-12","objectID":"/linux_cron/:0:2","tags":["cron","linux","自动化任务"],"title":"使用 cron 调度自动化任务","uri":"/linux_cron/"},{"categories":["Using Software"],"content":"运行 cron 守护进程 cron 作业由 crond 服务来执行，它会读取配置文件中的信息。在将作业添加到配置文件之前，必须启动 crond 服务，或者安装它。什么是 crond 呢？crond 是 cron 守护程序的简称。要确定 crond 服务是否正在运行，输入以下命令： $ systemctl status crond.service ● crond.service - Command Scheduler Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor pre\u003e Active: active (running) since Sat 2021-03-20 14:12:35 PDT; 1 day 21h ago Main PID: 1110 (crond) 如果你没有看到类似的内容 Active: active (running) since…，你需要启动 crond 守护进程。要在当前会话中运行 crond 服务，输入以下命令： $ systemctl run crond.service 将其配置为开机自启动，输入以下命令： $ systemctl enable crond.service 如果出于某种原因，你希望停止 crond 服务，按以下方式使用 stop 命令： $ systemctl stop crond.service 要重新启动它，只需使用 restart 命令： $ systemctl restart crond.service 定义一个 cron 作业 ","date":"2021-05-12","objectID":"/linux_cron/:0:3","tags":["cron","linux","自动化任务"],"title":"使用 cron 调度自动化任务","uri":"/linux_cron/"},{"categories":["Using Software"],"content":"cron 配置 以下是一个 cron 作业的配置细节示例。它定义了一个简单的 cron 作业，将 git master 分支的最新更改拉取到克隆的仓库中： */59 * * * * username cd /home/username/project/design \u0026\u0026 git pull origin master 主要有两部分： 第一部分是 */59 * * * *。这表明计时器设置为第 59 分钟执行一次。 该行的其余部分是命令，因为它将从命令行运行。 在此示例中，命令本身包含三个部分： 作业将以用户 username 的身份运行 它将切换到目录 /home/username/project/design 运行 git 命令拉取 master 分支中的最新更改 ","date":"2021-05-12","objectID":"/linux_cron/:0:4","tags":["cron","linux","自动化任务"],"title":"使用 cron 调度自动化任务","uri":"/linux_cron/"},{"categories":["Using Software"],"content":"时间语法 如上所述，时间信息是 cron 作业字符串的第一部分，如上所属。它决定了 cron 作业运行的频率和时间。它按以下顺序包括 5 个部分： 分钟 小时 一个月中的某天 月份 一周中的某天 下面是一种更图形化的方式来解释语法： .--------------- 分钟 (0 - 59) | .------------- 小时 (0 - 23) | | .---------- 一月中的某天 (1 - 31) | | | .------- 月份 (1 - 12) 或 jan、feb、mar、apr … | | | | .---- 一周中的某天 (0-6) (周日=0 或 7) | | | | | 或 sun、mon、tue、wed、thr、fri、sat | | | | | * * * * * user-name command-to-be-executed ","date":"2021-05-12","objectID":"/linux_cron/:0:5","tags":["cron","linux","自动化任务"],"title":"使用 cron 调度自动化任务","uri":"/linux_cron/"},{"categories":["Using Software"],"content":"星号的使用 星号（*）可以用来替代数字，表示该位置的所有可能值。例如，分钟位置上的星号会使它每分钟运行一次。以下示例可能有助于更好地理解语法。 这个 cron 作业将每分钟运行一次： * * * * [command] 斜杠表示分钟的间隔数。下面的示例将每小时运行 12 次，即每 5 分钟运行一次： */5 * * * * [command] 下一个示例将每月的第二天午夜（例如 1 月 2 日凌晨 12:00，2 月 2 日凌晨 12:00 等等）： 0 0 2 * * [command] 关于 cron 时间格式，还有更多格式符号，此处没有展开 ","date":"2021-05-12","objectID":"/linux_cron/:0:6","tags":["cron","linux","自动化任务"],"title":"使用 cron 调度自动化任务","uri":"/linux_cron/"},{"categories":["Using Software"],"content":"使用 crontab 创建一个 cron 作业 cron 作业会在后台运行，它会不断检查 /etc/crontab 文件和 /etc/cron.*/ 以及 /var/spool/cron/ 目录。每个用户在 /var/spool/cron/ 中都有一个唯一的 crontab 文件。 不应该直接编辑这些 cron 文件。crontab 命令是用于创建、编辑、安装、卸载和列出 cron 作业的方法。 更酷的是，在创建新文件或编辑现有文件后，你无需重新启动 cron。 $ crontab -e 这将打开你现有的 crontab 文件，或者创建一个。调用 crontab -e 时，默认情况下会使用 vi 编辑器。注意：要使用 Nano 编辑 crontab 文件，可以设置 EDITOR=nano 环境变量。 使用 -l 选项列出所有 cron 作业。如果需要，使用 -u 选项指定一个用户。 $ crontab -l $ crontab -u username -l 使用以下命令删除所有 cron 作业： $ crontab -r 要删除特定用户的作业，你必须以 root 用户身份运行以下命令： $ crontab -r -u username cron 作业看起来可能只是系统管理员的工具，但它实际上与许多 Web 应用程序和用户任务有关。 参考 Fedora Linux 文档的 [1] 使用 cron 调度任务 [2] ","date":"2021-05-12","objectID":"/linux_cron/:0:7","tags":["cron","linux","自动化任务"],"title":"使用 cron 调度自动化任务","uri":"/linux_cron/"},{"categories":["收集与整理"],"content":" 图解 Go 内存管理分配 https://mp.weixin.qq.com/s/bMr4lZgf-Fn1oaOSPPSDIQ Go 刷 leetcode 之任务调度器 https://mp.weixin.qq.com/s/oI441vsKhYninXJjg3t3yA 自己动手实现一个 kubectl exec https://mp.weixin.qq.com/s/VmEcIYfsUbgh-p4RCssGFQ 云上细粒度访问管理的参考架构 https://mp.weixin.qq.com/s/3sfWGKFa1POMFcWYJbk6Ug Go 工程师必学：Go 大杀器之跟踪剖析 trace https://mp.weixin.qq.com/s/7DY0hDwidgx0zezP1ml3Ig Go并发编程 — sync.Once 单实例模式的思考 https://mp.weixin.qq.com/s/nMHNujmbIx7uMqMtjUMTvQ kustomize 简明教程 https://mp.weixin.qq.com/s/JDsDOYaACgyt97-Nz5ScDw 你不知道的 Go 之 slice https://mp.weixin.qq.com/s/aOIp7jeBWubT-u85vQJxzA 缓存系统稳定性 - 架构师峰会演讲实录 https://mp.weixin.qq.com/s/o0qUY5zUjBQuOkx_4XGB6Q 微服务的灾难 https://mp.weixin.qq.com/s/bY2s7wjfggSt77kj8exYLQ 利用 NATS JetStream 构建分布式事件流系统 https://shijuvar.medium.com/building-distributed-event-streaming-systems-in-go-with-nats-jetstream-3938e6dc7a13 100 行 Golang 代码构建一个简单的终端仿真器 https://ishuah.com/2021/03/10/build-a-terminal-emulator-in-100-lines-of-go 编写简单的 CLI 程序：Python vs Go https://dev.to/jidicula/writing-a-simple-cli-program-python-vs-go-59kf 如何使用 Go，Maroto 和 GoFakeIt 创建 PDF https://dev.to/divrhino/creating-a-pdf-with-go-maroto-gofakeit-3c7m 一个用 Go 编写的类似 cowsay 的开源程序 weebsay https://github.com/irevenko/weebsay 最受欢迎的编程语言（1965/2021） https://statisticsanddata.org/data/the-most-popular-programming-languages-1965-2021/ 用NATS JetStream在Go中构建分布式事件流系统 https://shijuvar.medium.com/building-distributed-event-streaming-systems-in-go-with-nats-jetstream-3938e6dc7a13 外部secret管理系统与k8s的集成 https://github.com/external-secrets/kubernetes-external-secrets 生成随机的、可发音的名字，像docker给容器起的默认名字那样 https://github.com/lucasepe/codename Pixie为CNCF带来Kubernetes集群内的调试能力 https://thenewstack.io/pixie-brings-in-cluster-kubernetes-debugging-to-cncf/ bofied: 一个网络启动服务器，支持PXE服务协议 https://github.com/pojntfx/bofied 糟糕的磁盘性能 by Brendan Gregg http://www.brendangregg.com/blog/2021-05-09/poor-disk-performance.html 油管视频：使用go重头构建container https://www.youtube.com/watch?v=8fi7uSYlOdc milvus：开源向量数据库搜索引擎 https://github.com/milvus-io/milvus 使用go加速python代码 https://medium.com/geekculture/speed-up-python-with-golang-9a1d2c6067ab go语言编译器 https://mp.weixin.qq.com/s/UhxFOQBpW8EUVpFvqH2tMg 虚拟内存工作原理 https://mp.weixin.qq.com/s/c81Fvws0J2tHjcdTgxvv6g redis vs tendis https://mp.weixin.qq.com/s/MeYkfOIdnU6LYlsGb24KjQ ","date":"2021-05-12","objectID":"/go20210512/:0:0","tags":["Go","微服务"],"title":"Go20210512","uri":"/go20210512/"},{"categories":["关于"],"content":"关于我 勤奋的代码搬运工。 ","date":"2021-05-11","objectID":"/about/:0:1","tags":["about"],"title":"about me","uri":"/about/"},{"categories":["关于"],"content":"为什么建立个人博客？ 宣传自己，这是一个信息爆炸、人人自我营销的时代，不懂得宣传自己，就得不到机会的垂青。 个人觉得IT从业者就应该有自己的博客网站，记录与分享自己的经验，收集有价值的文章。 凭借互联网的媒介，结交志同道合的朋友，为未来的事业做准备。 ","date":"2021-05-11","objectID":"/about/:0:2","tags":["about"],"title":"about me","uri":"/about/"},{"categories":["关于"],"content":"关于本站 学习日记，点滴记录。 也会收集和分享互联网上比较经典且具有价值的文章。 ","date":"2021-05-11","objectID":"/about/:0:3","tags":["about"],"title":"about me","uri":"/about/"},{"categories":["关于"],"content":"站长是谁： 昵称：白菜林 对于技术很爱折腾、很有热情的小哥。 联系站长：77370751（微信/qq同号，备注来意） 邮箱Email：77370751@qq.com 交流QQ群：153690156 给我留言：https://support.qq.com/product/325110 ","date":"2021-05-11","objectID":"/about/:0:4","tags":["about"],"title":"about me","uri":"/about/"},{"categories":["关于"],"content":"我的主页 Gitee: https://lyhuilin.gitee.io/ Github: https://github.com/clin003/meBlog ","date":"2021-05-11","objectID":"/about/:0:5","tags":["about"],"title":"about me","uri":"/about/"},{"categories":["关于"],"content":"未来发展： 未来很长，且慢慢耕耘。 ","date":"2021-05-11","objectID":"/about/:0:6","tags":["about"],"title":"about me","uri":"/about/"},{"categories":["关于"],"content":"白菜林的博客小站历程： 2021年5月11日 白菜林的博客小站 建站并部署至Github page。 ","date":"2021-05-11","objectID":"/about/:0:7","tags":["about"],"title":"about me","uri":"/about/"},{"categories":["关于"],"content":"特别感谢 非常感谢每一位走进本站的同学对我们的大力支持，你们的走进是我坚持的动力！ 如果不介意,请把本站分享给您的同学朋友！ 我会一直努力，不求最好，只求更好！ ","date":"2021-05-11","objectID":"/about/:0:8","tags":["about"],"title":"about me","uri":"/about/"},{"categories":["关于"],"content":"Hello World! 白菜林^_^ ","date":"2021-05-11","objectID":"/hello_world/:0:0","tags":["about"],"title":"Hello world","uri":"/hello_world/"}]